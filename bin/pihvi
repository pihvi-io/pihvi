#!/bin/bash
set -e

setup_macos () {
	
	vars='$HOSTMACHINE_IP'

	# Create a custom alias for localhost which can be resolved
	echo "Create 10.254.254.254 alias for localhost..."	
	# This ensures that the alias will be enabled after boot
	render_template templates/pihvi.loopback.alias.plist.tmpl "$vars" | sudo tee /Library/LaunchDaemons/pihvi.loopback.alias.plist > /dev/null

	# Start the 10.254.254.254 interface now too
	sudo ifconfig lo0 alias $HOSTMACHINE_IP

	# Create a custom dns resolver for *.test addresses
	echo "Setting up dns resolver for *.test addresses in /etc/resolver/test..."
	render_template templates/resolver.tmpl "$vars" | sudo tee /etc/resolver/test > /dev/null

	# Creates ca certificates
	if create_ca_cert; then
		echo "Adding the CA certificate to system trustchain"
		sudo security add-trusted-cert -d -r trustRoot -k '/Library/Keychains/System.keychain' ~/.pihvi/certs/ca.crt
	fi


	echo "Checking Docker nameserver settings..."
	if ! check_docker_nameserver; then
		# Check that docker is running
		open -a docker

		echo ""
		echo "FINAL STEP: Check that you have these settings in Docker-for-Mac->Preferences->Daemon->Advanced:"
		echo "========================================"
		render_template templates/daemon.json.tmpl "$vars"
		echo "========================================"

		echo "Copy paste these settings and press 'Apply & Restart'"
		echo "Press enter after you have done this..."
		while true; do
			read input_variable
			if check_docker_nameserver; then
				break
			else
				echo "Try again..."
			fi
		done
	fi
	echo "Setup complete!"
}

# Check that $HOSTMACHINE_IP is used as nameserver for docker containers
check_docker_nameserver() {
	docker run --rm -t alpine cat /etc/resolv.conf | grep  "nameserver $HOSTMACHINE_IP" > /dev/null
}

create_ca_cert () {
	# Create a custom CA certificate
	if [ ! -f ~/.pihvi/certs/ca.key ] || [ ! -f ~/.pihvi/certs/ca.crt ]; then
		echo "Creating a CA certificate for self-signing https certificates in local development..."
		mkdir -p ~/.pihvi/certs
	    docker run --rm -t -v ~/.pihvi/certs:/certs pihvio/openssl req -x509 -newkey rsa:2048 -days 7300 -keyout /certs/ca.key \
		    -out /certs/ca.crt -nodes \
		    -subj "/O=Pihvi.io CA/OU=Pihvi.io self-signed certificate /CN=Pihvi.io local development Root CA"
		return 0
	fi
	return 1
}

# Renders .tmpl file with envsubst
render_template() {
	local template=$1
	local vars=$2
	local docker_options=""

	# Create -e separated list of all
	for element in $(echo $vars | sed "s/:/ /g"); do
	    docker_options+=" -e ${element#?}=$(eval echo $element)"
	done

	# Run the envsubst command inside a docker container
	docker run --rm -t -e VARS=$VARS $docker_options pihvio/envsubst "$(cat $template)"
}

setup_linux() {
	# Setup .test resolving
	if [ -f /etc/resolvconf/resolv.conf.d/head ]; then

		if ! grep -q $HOSTMACHINE_IP /etc/resolvconf/resolv.conf.d/head; then
			echo "nameserver $HOSTMACHINE_IP" >> /etc/resolvconf/resolv.conf.d/head
		fi
	else
		if ! grep -q $HOSTMACHINE_IP /etc/resolv.conf; then
			echo -e "nameserver $HOSTMACHINE_IP\n$(cat /etc/resolv.conf)" > /etc/resolv.conf
		fi
	fi
	
	# Creates ca certificates
	create_ca_cert
	if [ ! -f /usr/local/share/ca-certificates/pihvi.crt ]; then
		echo "Adding the CA certificate to system trustchain"
		cp ~/.pihvi/certs/ca.crt /usr/local/share/ca-certificates/pihvi.crt
		sudo update-ca-certificates
	fi
}

delete_macos() {
	# Remove files
	if [ -f /etc/resolver/test ]; then
		sudo rm /etc/resolver/test
	fi
	if [ -f /Library/LaunchDaemons/pihvi.loopback.alias.plist ]; then
		sudo rm /Library/LaunchDaemons/pihvi.loopback.alias.plist
	fi

	# Untrust generated root certificate
	if [ -f ~/.pihvi/certs/ca.crt ]; then
		sudo security remove-trusted-cert -d ~/.pihvi/certs/ca.crt
	fi
}
delete_linux() {
	echo "Linux is not yet supported..."
	exit 1
}
delete_shared() {
	# Remove generated files
	if [ -d ~/.pihvi ]; then
		rm -r ~/.pihvi
	fi
}

# Check which platform is used
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
   platform='linux'
   export HOSTMACHINE_IP=$(ifconfig docker0 | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')
   DIR="$(dirname $([ -L $0 ] && readlink -f $0 || echo $0))/.."
elif [[ "$unamestr" == 'Darwin' ]]; then
   platform='macos'
   # This works too but Mac can't bind to this address on hostmachine
   #export HOSTMACHINE_IP='192.168.65.1'
   export HOSTMACHINE_IP='10.254.254.254'
   DIR="$(dirname $([ -L $0 ] && readlink $0 || echo $0))/.."
fi

# Switch to the project folder
cd $DIR


if [[ "$1" == 'setup' ]]; then
	echo "NOTE: Setup needs to do few system changes and will prompt for sudo..."
	case $platform in
	linux)
	  setup_linux
	;;
	macos)
	  setup_macos
	;;
	esac

	docker-compose up -d --force-recreate --remove-orphans
elif [[ "$1" == 'remove' ]] || [[ "$1" == 'delete' ]]; then
	echo "Removing pihvi settings and tools. Sudo is needed to remove the system changes..."
	set +e
	case $platform in
	linux)
	  delete_linux
	;;
	macos)
	  delete_macos
	;;
	esac

	# Remove all created containers
	if [[ $(docker-compose ps -q) ]]; then
		docker-compose stop
		docker-compose rm -f
	fi

	# Remove rest of the files
	delete_shared
elif [[ "$1" == 'update' ]]; then
	git fetch
	git reset origin/master --hard
elif [[ "$1" == 'reload' ]]; then
	docker-compose pull
	docker-compose up -d --force-recreate --remove-orphans
else
	# Use docker-compose.yml in the pihvi folder for rest of commands
	docker-compose "$@"
fi